{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " What does one need to do to use a module?\n",
    "* import the respective module into our code-base. by using the import statement. \n",
    "\n",
    " Name a Module (not the DateTime Nodule) we looked at and write a line or 2 of code as an example using this module.\n",
    "* import math\n",
    "* print(math.ceil(10.2))\n",
    "\n",
    " What is a benefit of using Exception handling?\n",
    "* Exceptions will allow you to move past an error, used for clarity in code and identifying which parts of your code can run and cant.\n",
    "\n",
    " what are the 4 components used for Python Exception Handling?\n",
    "* - `try` - Tests a block of code for errors\n",
    "* - `except` - Handles the error\n",
    "*  - `else` - Executes code when there is NO error\n",
    "*  - `finally` - Executes code, regardless of `try` and `except`\n",
    "\n",
    " NumPy arrays are like what Python data type?\n",
    "* lists, EXCEPT: Lists store various data types, while Arrays store ONLY 1 specified data type\n",
    "\n",
    "\n",
    "What is one of the main benefits of using NumPy arrays.\n",
    "* Less Memory than lists, Faster than lists, and convenient\n",
    "\n",
    "What is one of the main requirements about the 'dtype' of NumPy arrays?\n",
    "* All elements within a single array must be of the same data type\n",
    "\n",
    "Of the 10 uses of NumPy, name 2.\n",
    "* Numpy Arithmetic Operations\n",
    "* Numpy Searching, Sorting & counting\n",
    "\n",
    " Name one of the other libraries we'll use with NumPy?\n",
    "* Pandas\n",
    "\n",
    "What is the shape of NumPy arrays?\n",
    "* Tuple\n",
    "\n",
    "What is a Tensor?\n",
    "* An Array with 3 Axis, a 3D array\n",
    "\n",
    "Name a reason why it's better using  NumPy for Data Analysis than using a Python List?\n",
    "* More efficient\n",
    "\n",
    "When creating an \"empty\" array, where do the elements come from?\n",
    "* the array is filled with whatever values happen to already exist in that memory location. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Create an if statement: if 'age' is greater than or equal to 25, print \"Renting a car is more affordable\", however if 'age' is less than 25, print \"Renting a car is very expensive.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Renting a car is more affordable\n"
     ]
    }
   ],
   "source": [
    "age = int(input('Enter your age'))\n",
    "\n",
    "if age >=25:\n",
    "    print(\"Renting a car is more affordable\")\n",
    "else:\n",
    "    print(\"Renting a car is very expensive\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Create and chain an if-else  statement: if 'age' is greater than or equal to 25, print \"Renting a car is more affordable.\" If 'age' is less than 25 but greater than or equal to 18, print \"Renting a car is very expensive.\" Finally, if age is less than 18, print \"You cannot legally rent a car.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You cannot buy a car IDIOT\n"
     ]
    }
   ],
   "source": [
    "age = int(input('Enter your age'))\n",
    "\n",
    "if age >=25:\n",
    "    print(\"Renting a car is more affordable\")\n",
    "elif age < 25 and age >= 18:\n",
    "    print(\"Renting a car is very expensive.\")\n",
    "elif age < 18:\n",
    "    print(\"You cannot buy a car IDIOT\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Loop over the following string to (1) count all the characters in the string and (2) print out all the vowels -- \"The quick brown fox jumps over the lazy dog\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43\n",
      "euioouoeeao"
     ]
    }
   ],
   "source": [
    "string1 = 'The quick brown fox jumps over the lazy dog'\n",
    "count = len(string1)\n",
    "sum = 0\n",
    "vowels = [\"a\", 'e', 'i', 'o', 'u']\n",
    "print(count)\n",
    "\n",
    "for bruh in string1:\n",
    "    if bruh in vowels:\n",
    "                print(bruh, end = '')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Write a nested loop that prints out every piece of clothing from the `couture` list, in every fashionable color from the `panettone` set: couture = [\"trousers\", \"blouse\", \"bandana\", \"cumber band\", \"blazer\", \"vest\", \"french beret\", \"scarf\", \"stole\"] and panettone = {\"cerise\", \"fuchsia\", \"aqua\", \"maple\", \"auburn\", \"burnt sienna\", \"gunmetal blue\", \"Dark Sapphire\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "trousers aqua\n",
      "trousers auburn\n",
      "trousers cerise\n",
      "trousers fuchsia\n",
      "trousers burnt sienna\n",
      "trousers gunmetal blue\n",
      "trousers maple\n",
      "trousers Dark Sapphire\n",
      "\n",
      "blouse aqua\n",
      "blouse auburn\n",
      "blouse cerise\n",
      "blouse fuchsia\n",
      "blouse burnt sienna\n",
      "blouse gunmetal blue\n",
      "blouse maple\n",
      "blouse Dark Sapphire\n",
      "\n",
      "bandana aqua\n",
      "bandana auburn\n",
      "bandana cerise\n",
      "bandana fuchsia\n",
      "bandana burnt sienna\n",
      "bandana gunmetal blue\n",
      "bandana maple\n",
      "bandana Dark Sapphire\n",
      "\n",
      "cumber band aqua\n",
      "cumber band auburn\n",
      "cumber band cerise\n",
      "cumber band fuchsia\n",
      "cumber band burnt sienna\n",
      "cumber band gunmetal blue\n",
      "cumber band maple\n",
      "cumber band Dark Sapphire\n",
      "\n",
      "blazer aqua\n",
      "blazer auburn\n",
      "blazer cerise\n",
      "blazer fuchsia\n",
      "blazer burnt sienna\n",
      "blazer gunmetal blue\n",
      "blazer maple\n",
      "blazer Dark Sapphire\n",
      "\n",
      "vest aqua\n",
      "vest auburn\n",
      "vest cerise\n",
      "vest fuchsia\n",
      "vest burnt sienna\n",
      "vest gunmetal blue\n",
      "vest maple\n",
      "vest Dark Sapphire\n",
      "\n",
      "french beret aqua\n",
      "french beret auburn\n",
      "french beret cerise\n",
      "french beret fuchsia\n",
      "french beret burnt sienna\n",
      "french beret gunmetal blue\n",
      "french beret maple\n",
      "french beret Dark Sapphire\n",
      "\n",
      "scarf aqua\n",
      "scarf auburn\n",
      "scarf cerise\n",
      "scarf fuchsia\n",
      "scarf burnt sienna\n",
      "scarf gunmetal blue\n",
      "scarf maple\n",
      "scarf Dark Sapphire\n",
      "\n",
      "stole aqua\n",
      "stole auburn\n",
      "stole cerise\n",
      "stole fuchsia\n",
      "stole burnt sienna\n",
      "stole gunmetal blue\n",
      "stole maple\n",
      "stole Dark Sapphire\n",
      "\n"
     ]
    }
   ],
   "source": [
    "couture = [\"trousers\", \"blouse\", \"bandana\", \"cumber band\", \"blazer\", \"vest\", \"french beret\", \"scarf\", \"stole\"]\n",
    "panettone = {\"cerise\", \"fuchsia\", \"aqua\", \"maple\", \"auburn\", \"burnt sienna\", \"gunmetal blue\", \"Dark Sapphire\"}\n",
    "\n",
    "#outerloop & inner loop\n",
    "for clothes in couture:\n",
    "    for color in panettone:\n",
    "        print( clothes, color)\n",
    "\n",
    "    print() # a new line between each section\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use range as a loop to calculate the sum of all the numbers from 1 to 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5050\n"
     ]
    }
   ],
   "source": [
    "string1 = range(1,101)\n",
    "\n",
    "sum = 0\n",
    "for char in string1:\n",
    "    sum += int(char)\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Print the second item in this fruits list.\n",
    "    [\"apple\", \"banana\", \"cherry\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "banana\n"
     ]
    }
   ],
   "source": [
    "#This will print the second item in the list\n",
    "\n",
    "list = [\"apple\", \"banana\", \"cherry\"]\n",
    "\n",
    "print(list[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Change the value from \"apple\" to \"kiwi\", in the fruits list.\n",
    "    [\"apple\", \"banana\", \"cherry\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['kiwi', 'banana', 'cherry']\n"
     ]
    }
   ],
   "source": [
    "list = [\"apple\", \"banana\", \"cherry\"]\n",
    "\n",
    "list[0] = \"kiwi\"\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the append method to add \"orange\" to the fruits list.\n",
    "    [\"apple\", \"banana\", \"cherry\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana', 'cherry', 'orange']\n"
     ]
    }
   ],
   "source": [
    "list = [\"apple\", \"banana\", \"cherry\"]\n",
    "\n",
    "list.append('orange')\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the insert method to add \"lemon\" as the second item in the fruits list.\n",
    "    [\"apple\", \"banana\", \"cherry\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'Lemon', 'banana', 'cherry']\n"
     ]
    }
   ],
   "source": [
    "list = [\"apple\", \"banana\", \"cherry\"]\n",
    "list.insert(1, 'Lemon')\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the remove method to remove \"banana\" from the fruits list.\n",
    "    [\"apple\", \"banana\", \"cherry\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'cherry']\n"
     ]
    }
   ],
   "source": [
    "list = [\"apple\", \"banana\", \"cherry\"]\n",
    "list.remove(\"banana\")\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use negative indexing to print the 3rd and 2nd to last items in the list.\n",
    "    [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kiwi\n",
      "melon\n"
     ]
    }
   ],
   "source": [
    "list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n",
    "\n",
    "print(list[-3])\n",
    "print(list[-2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use a range of indexes to print the third, fourth, and fifth item in the list.\n",
    "    [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['cherry', 'orange', 'kiwi']\n"
     ]
    }
   ],
   "source": [
    "list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n",
    "print(list[2:5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Use the correct syntax to print the number of items in the list.\n",
    "    [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    }
   ],
   "source": [
    "list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n",
    "list_length = len(list)\n",
    "print(list_length)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the correct syntax to sort this list in reverse order\n",
    "    [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['orange', 'melon', 'mango', 'kiwi', 'cherry', 'banana', 'apple']\n"
     ]
    }
   ],
   "source": [
    "list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n",
    "list.sort(reverse=True)\n",
    "\n",
    "print(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the DateTime module to get Current Date and Time, and save it to a variable. Then extract just the Full month name form that variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "October\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "a = datetime.datetime.now()\n",
    "print(a.strftime('%B'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a simple function that takes 2 parameters -- a  first name and a day name.\n",
    "    - Set a default value for the day name of Sunday.\n",
    "    - Have the function print out a greeting -- using the parameters -- that says something like \"Hi first-name! Happy day-name!\". Remember to use the variables in the greeting to replace first-name and day-name.  \n",
    "    - Invoke this function with 2 variables.\n",
    "    - Invoke this function with 1 variable only."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Howdy! Brian\n",
      "Enjoy the scaries becauses its! Sunday\n",
      "Howdy! Brian\n",
      "Enjoy the scaries becauses its! sunday\n"
     ]
    }
   ],
   "source": [
    "#Two Vars\n",
    "\n",
    "def greeting(first_name, day_name):\n",
    "    print('Howdy!', first_name)\n",
    "    print('Enjoy the scaries becauses its!', day_name)\n",
    "\n",
    "greeting('Brian', 'Sunday')\n",
    "\n",
    "#One Var\n",
    "def greeting(first_name, day_name ='sunday'):\n",
    "    print('Howdy!', first_name)\n",
    "    print('Enjoy the scaries becauses its!', day_name)\n",
    "\n",
    "greeting('Brian')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a block of code to handle one of the most common Python exception errors. Select one of the common errors from the curriculum section on Python Exception handling. Have your code example uses the `try`,`except`, `else`, and `finally` components."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Something went wrong\n",
      "This homework wasn't that bad\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    print(x)\n",
    "except:\n",
    "    print(\"Something went wrong\")\n",
    "else:\n",
    "     print(\"Nothing went wrong\")\n",
    "finally:\n",
    "    print(\"This homework wasn't that bad\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
