{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 3 Homework Brian Haney\n",
    "\n",
    "\n",
    "<ins>Use markdown formatting for the following questions (e.g., bold lettering, bullet points, different font sizes, etc.)</ins>: \n",
    "\n",
    "* _What is an algorithm?_ \\\n",
    "An algorithm is a set of instructions for solving a problem or accomplishing a task\n",
    "* _Variable names may not start with certain characters - name two._ :\\\n",
    "A variable cannot start with a number and anything not alphanumeric\n",
    "*  _What is a Semantic error?_: \\\n",
    "A semantic error is text which is grammatically correct but doesn't make any sense.\n",
    "* _What is the #1 rule of coding / debugging?_: \\\n",
    "Complexity is the enemy of effiency, make your code as easy to understand as possible.\n",
    "* _List 5 Python reserved words._:\\\n",
    " Class, False, AND, Break, Continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Brian Haney\n",
      "Sandwhiches\n",
      "CIA Intelligence Specialist\n",
      "\n",
      "True\n",
      "n\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "#6 Write a multi-line comment with your name, favorite food, and dream job on 3 different lines\n",
    "q1 = \"\"\"\n",
    "Brian Haney\n",
    "Sandwhiches\n",
    "CIA Intelligence Specialist\n",
    "\"\"\"\n",
    "print(q1)\n",
    "\n",
    "#7. Assign 5 different data types to 5 different variables. At least one datatype must be a string  \n",
    "   # - Print the length of your string\n",
    "   # - Print the index value of the 4th character in your string\n",
    "\n",
    "var1 = 1 #Int\n",
    "var2 = ['sandwhich', 'hamstring', 'bannana'] #list\n",
    "var3 = print(10 > 9) #bolean\n",
    "var4 = (1, 'jessica', 3.2) #tuple\n",
    "varstring = \"String\" #string\n",
    "\n",
    "print(varstring[4])\n",
    "print(len(varstring))\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ing Data Analytics \n",
      "Learning Data Analytics and Python is Great!\n",
      "Learning Data Analytics and Python is Awesome!\n",
      "Hi my name is Brian, I am 5'11 (could be taller)  and 25 old today.\n",
      "25.0\n"
     ]
    }
   ],
   "source": [
    "#8. Create a new variable called savvy, and assign it the string with this phrase \"Learning Data Analytics and Python is Awesome!\"\n",
    "   # - Return a range of characters that slices the above string from the beginning of  \"ing\" up to before \"and\"\n",
    "    #- Replace \"Awesome\" with \"great\" in the string\n",
    "    #- Test and print the savvy string to see it contains \"Python\"\n",
    "\n",
    "savvy = 'Learning Data Analytics and Python is Awesome!'\n",
    "print(savvy[5:24])\n",
    "print(savvy.replace(\"Awesome\", \"Great\"))\n",
    "print(savvy)\n",
    "\n",
    "\n",
    "#9 Create and assign 3 more variables called name, age and length using the multi-variable  naming method\n",
    "   # - Format a new string called 'miniBio' using variables in curly brackets to complete this phrase... \"Hi my name is (name), I am (tall) and (so) old today.\"\n",
    "    #- Print 'miniBio'\n",
    "    #- Cast and print the age variable to a float\n",
    "\n",
    "name = \"Brian\"\n",
    "age = 25\n",
    "height = \"5'11 (could be taller) \"\n",
    "\n",
    "miniBio =f\"Hi my name is {name}, I am {height} and {age} old today.\"\n",
    "print(miniBio)\n",
    "\n",
    "age = float(age)\n",
    "print(age)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Sandwhich', 'Hot sauce', 2, 4, 5]\n",
      "sandwhich ['Hot dog', 'Hot sauce', 2, 4, 5]\n",
      "['Hot dog', 'Hot sauce', 2, 4, 5, 'keg Stand']\n",
      "6\n",
      "['Hot dog', 'Hot sauce', 2, 4, 5, 'keg Stand']\n",
      "['Hot dog', 'Hot sauce', 2]\n",
      "Sorted numbers in reverse - ['5', '4', '3', '2', '1']\n",
      "Copied List: ['5', '4', '3', '2', '1']\n",
      "['5', '4', '3', '2', '1', '5', '4', '3', '2', '1']\n"
     ]
    }
   ],
   "source": [
    "#10. Create a list of at least 5 elements of mixed data types\n",
    "    #- Replace a part of it with something else\n",
    "    #- Append or insert several more items to the list\n",
    "    #- Find and print the length of the list\n",
    "    #- Slice a sub-section of the 1st list, and save it to a different 2nd list\n",
    "    #- Print the 2nd list\n",
    "    #- Extend your original list with the 2nd list sliced above\n",
    "    #- Create a new list called \"simList\" containing at least 5 elements of the same data type, either string, integer, float, or Boolean\n",
    "    #- Sort \"simList\", and print the list\n",
    "    #- Copy the \"simList\" list to another 3rd list\n",
    "    #- Add the 2nd and 3rd lists together into a 4th list\n",
    "\n",
    "inputList = [\"Sandwhich\", \"Hot sauce\", 2, 4, 5]\n",
    "print(inputList) \n",
    "\n",
    "inputList [0] = \"Hot dog\"\n",
    "print('sandwhich', inputList)\n",
    "\n",
    "inputList.append(\"keg Stand\")\n",
    "print(inputList)\n",
    "\n",
    "print(len(inputList))\n",
    "\n",
    "newlist = inputList[0:3]\n",
    "print(inputList)\n",
    "print(newlist)\n",
    "\n",
    "simList = [\"1\",\"3\",\"2\",\"5\",\"4\"]\n",
    "simList.sort(reverse=True)\n",
    "print(\"Sorted numbers in reverse -\", simList)\n",
    "\n",
    "new_list = simList.copy()\n",
    "print('Copied List:', new_list)\n",
    "\n",
    "newnewlist = new_list + simList\n",
    "\n",
    "print(newnewlist)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "single tuple ... (1, 2, 3, 4, 5)\n",
      "Secondtuple ... (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n",
      "(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n",
      "newtuple[12] ... 3\n",
      "[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]\n",
      "thirdtuple ... (2, 3, 4, 5)\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "fourthtuple ... (50,)\n",
      "fifth ... (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5)\n"
     ]
    }
   ],
   "source": [
    "#11. Create a tuple of about 5 elements\n",
    "firsttuple = (1, 2, 3, 4, 5)\n",
    "print(\"single tuple ...\", firsttuple)\n",
    "\n",
    "\n",
    "    #- Multiply your tuple by 3 and save it to a new 2nd tuple\n",
    "\n",
    "secondtuple = firsttuple * 3\n",
    "print(\"Secondtuple ...\", secondtuple)\n",
    "\n",
    "   # - Access and print the 12th element from the 2nd tuple\n",
    "\n",
    "\n",
    "print(secondtuple)\n",
    "print(\"newtuple[12] ...\", secondtuple[11])\n",
    "\n",
    "\n",
    "   # - Sort the 2nd tuple and print it\n",
    "\n",
    "print(sorted(secondtuple))\n",
    "\n",
    "\n",
    "   # - Copy 4 specific elements from your 2nd tuple to a new 3nd tuple\n",
    "\n",
    "thirdtuple = (secondtuple[1], secondtuple [2], secondtuple[3], secondtuple[4])\n",
    "print(\"thirdtuple ...\", thirdtuple)\n",
    "\n",
    "   # - Unpack the 3rd tuple into 4 variables and print these variables\n",
    "\n",
    "\n",
    "thirdtuple = (secondtuple[1], secondtuple [2], secondtuple[3], secondtuple[4])\n",
    "\n",
    "var1, var2, var3, var4 = thirdtuple\n",
    "\n",
    "print(var1)\n",
    "print(var2)\n",
    "print(var3)\n",
    "print(var4)\n",
    "\n",
    "\n",
    "\n",
    "   # - Create a 4th tuple with single item 50 and print this tuple\n",
    "\n",
    "#Create a 4th tuple with single item 50 and print this tuple\n",
    "\n",
    "fourthtuple =(50,)\n",
    "print(\"fourthtuple ...\", fourthtuple)\n",
    "\n",
    "\n",
    "\n",
    "   # - Add the 2nd and 3rd tuple together into a 5th tuple and print the tuple\n",
    "\n",
    "\n",
    "fifthtuple = secondtuple + thirdtuple\n",
    "print(\"fifth ...\", fifthtuple)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "thisSet ...  {'Toast', 'French Toast', 'Toaster Strudel'}\n",
      "thisSet ...  {'Toast', 'Toaster Strudel', 'Carrot', 'm', 'Cantelope', 'n', 'French Toast', 'K', 'w', 'a', 'i', 'e', 'o', 't', 'r', 'l'}\n",
      "thisSet ...  {'Toast', 'Toaster Strudel', 'Carrot', 'm', 'Cantelope', 'n', 'truck', 'French Toast', 'K', 'w', 'a', 'i', 'e', 'o', 't', 'r', 'l'}\n",
      "secondset ... {'minigun', 'scooter', 'Basketball'}\n",
      "thirdset ... {'Toaster Strudel', 'Carrot', 'n', 'French Toast', 'K', 'm', 'a', 'i', 'e', 'minigun', 'l', 'Toast', 'Basketball', 'Cantelope', 'scooter', 'w', 'o', 't', 'r', 'truck'}\n",
      "secondset pop ... {'scooter', 'Basketball'}\n",
      "myset cleared ... set()\n",
      "remainder of thirdset ... {'Carrot', 'n', 'French Toast', 'K', 'm', 'a', 'i', 'e', 'minigun', 'l', 'Toast', 'Basketball', 'Cantelope', 'scooter', 'w', 'o', 't', 'r', 'truck'}\n"
     ]
    }
   ],
   "source": [
    "#Create a set of about 3 elements\n",
    "\n",
    "thisSet = {\"Toast\", \"French Toast\", \"Toaster Strudel\"}\n",
    "print(\"thisSet ... \", thisSet)\n",
    "\n",
    "    #- Add a list of fruits to the above set and print the result\n",
    "\n",
    "thisSet.add('Cantelope')\n",
    "thisSet.add('Carrot')\n",
    "thisSet.update(\"Kiwi\", \"watermelon\")\n",
    "print(\"thisSet ... \", thisSet)\n",
    "\n",
    "    #- Add a car element to your set\n",
    "\n",
    "thisSet.add(\"truck\")\n",
    "print(\"thisSet ... \", thisSet)\n",
    "\n",
    "    #- Create a 2nd set with a few odd items\n",
    "\n",
    "secondset = {\"scooter\", \"Basketball\", \"minigun\"}\n",
    "print(\"secondset ...\", secondset)\n",
    "\n",
    "    #- Save the union of 1st set and 2nd set to a 3rd set\n",
    "\n",
    "thirdset = thisSet.union(secondset)\n",
    "print(\"thirdset ...\", thirdset)\n",
    "\n",
    "    #- Pop an element from the 2nd set, and print the remainder of the set\n",
    "\n",
    "secondset.pop()\n",
    "print(\"secondset pop ...\", secondset)\n",
    "\n",
    "\n",
    "    #- Clear the 1st set and print the result\n",
    "\n",
    "thisSet.clear()\n",
    "print(\"myset cleared ...\", thisSet)\n",
    "\n",
    "\n",
    "    #- Discard an element, and remove another element from the 3rd set\n",
    "\n",
    "thirdset.discard(\"Scooter\")\n",
    "thirdset.remove(\"Toaster Strudel\")\n",
    "\n",
    "\n",
    "\n",
    "    #- Print the remainder of the 3rd set\n",
    "print(\"remainder of thirdset ...\", thirdset)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'brand': 'Ford', 'model': 'Mustang', 'electric': False, 'year': 1964, 'weight': '3049 lbs'}\n",
      "Printing Brand Type\n",
      "Changed the brand to chevy {'brand': 'Chevy', 'model': 'Mustang', 'electric': False, 'year': 1964, 'weight': '3049 lbs'}\n",
      "add a list to mydict {'brand': 'Chevy', 'model': 'Mustang', 'electric': False, 'year': 1964, 'weight': '3049 lbs', 'color': 'green', 'the_list': ['apple', 'banana', 'orange']}\n",
      "This dict keys dict_keys(['brand', 'model', 'electric', 'year', 'weight', 'color', 'the_list'])\n",
      "mydict values dict_values(['Chevy', 'Mustang', False, 1964, '3049 lbs', 'green', ['apple', 'banana', 'orange']])\n",
      "copy of Thisdict {'brand': 'Chevy', 'model': 'Mustang', 'electric': False, 'year': 1964, 'weight': '3049 lbs', 'color': 'green', 'the_list': ['apple', 'banana', 'orange']}\n",
      "copydict after pop {'model': 'Mustang', 'electric': False, 'year': 1964, 'weight': '3049 lbs', 'color': 'green', 'the_list': ['apple', 'banana', 'orange']}\n",
      "cleared copydict {}\n"
     ]
    }
   ],
   "source": [
    "#Create a dictionary with at least 5 values of different data types\n",
    "\n",
    "thisDict = {\n",
    "    \"brand\": \"Ford\",\n",
    "    \"model\": \"Mustang\",\n",
    "    \"electric\": False,\n",
    "    \"year\": 1964,\n",
    "    \"weight\" : \"3049 lbs\",}\n",
    "\n",
    "print(thisDict)\n",
    "\n",
    "   # - Print out 1 value\n",
    "   \n",
    "print(\"Printing Brand Type\"), thisDict[\"brand\"]\n",
    "\n",
    "   # - Replace any one value in your dictionary with your name\n",
    "\n",
    "thisDict[\"brand\"] = \"Chevy\" \n",
    "print(\"Changed the brand to chevy\", thisDict)\n",
    "\n",
    "   # - Add your favorite color to the dictionary\n",
    "\n",
    "thisDict[\"color\"] = \"green\"\n",
    "\n",
    "   # - Add a list, tuple or set to your dictionary\n",
    "\n",
    "thisDict[\"the_list\"] = [\"apple\", \"banana\", \"orange\"]\n",
    "print(\"add a list to mydict\", thisDict)\n",
    "\n",
    "   # - Print a list of the dictionary keys\n",
    "keys = thisDict.keys()\n",
    "print(\"This dict keys\", keys)\n",
    "\n",
    "   # - Print a list of the dictionary values\n",
    "\n",
    "values = thisDict.values()\n",
    "print(\"mydict values\", values)\n",
    "\n",
    "\n",
    "   # - Copy your 1st dictionary into a 2nd dictionary\n",
    "\n",
    "copydict = thisDict.copy()\n",
    "print(\"copy of Thisdict\", copydict)\n",
    "\n",
    "\n",
    "   # - Pop an item from the 2nd dictionary, and print the dictionary\n",
    "\n",
    "copydict.pop(\"brand\")\n",
    "print(\"copydict after pop\", copydict)\n",
    "\n",
    "\n",
    "\n",
    "   # - Remove all the elements from the 2nd dictionary and print the result\n",
    "\n",
    "\n",
    "copydict.clear()\n",
    "print(\"cleared copydict\", copydict)\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
